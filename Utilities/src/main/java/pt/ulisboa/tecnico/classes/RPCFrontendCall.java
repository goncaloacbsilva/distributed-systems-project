package pt.ulisboa.tecnico.classes;

import io.grpc.StatusRuntimeException;
import pt.ulisboa.tecnico.classes.contract.ClassesDefinitions;

import java.util.ArrayList;
import java.util.List;

/**
 * This class is the boilerplate for every RPC call. It's responsible for retrying requests or
 * handling Response exceptions
 */
public abstract class RPCFrontendCall {
  private ClassesDefinitions.ResponseCode _responseCode;
  private final List<String> _targetServerQualifiers;
  private boolean _previousServerIsInactive;

  /**
   * Initializes base abstract class
   *
   * @see RPCFrontendCall
   */
  public RPCFrontendCall(List<String> qualifiers) {
    this._targetServerQualifiers = new ArrayList<>(qualifiers);
    this._previousServerIsInactive = false;
  }

  /**
   * RPC Execution template. When called, it uses abstract methods 'createStubForRequest' for
   * generating stubs and 'requestCall' for creating and executing requests. In case of an inactive
   * server the function is recalled.
   *
   * @throws ResponseException
   * @throws StatusRuntimeException
   */
  public void exec() throws ResponseException, StatusRuntimeException {
    createStubForRequest(this._targetServerQualifiers, this._previousServerIsInactive);

    _responseCode = requestCall();

    if (_responseCode != ClassesDefinitions.ResponseCode.OK) {
      if (_responseCode == ClassesDefinitions.ResponseCode.INACTIVE_SERVER) {
        this._previousServerIsInactive = true;
        exec();
      } else {
        throw new ResponseException(_responseCode);
      }
    }
  }

  /**
   * Abstract method for generating stubs. When called this method should handle all the logic
   * required to create a new stub
   *
   * @param qualifiers server qualifiers list
   * @param previousIsInactive boolean that tells if the previous server is inactive
   */
  public abstract void createStubForRequest(List<String> qualifiers, boolean previousIsInactive);

  /**
   * Abstract method for executing RPC requests When called this method should handle all the logic
   * required to create a new RPC request and executing it using the stub generated by
   * 'createStubForRequest'
   *
   * @throws StatusRuntimeException
   */
  public abstract ClassesDefinitions.ResponseCode requestCall() throws StatusRuntimeException;
}
